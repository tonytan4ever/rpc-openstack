---
# Copyright 2017, Rackspace US, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

- name: Stage the git and python artifacts
  hosts: "{{ staging_host | default('localhost') }}"
  user: root
  vars:
    aria_input_file: "/tmp/python_artifact_list.txt"
    rpco_mirror_base_url: "https://rpc-repo.rackspace.com"
    http_proxy_env: "{{ lookup('env', 'http_proxy') | default('not_set', true) }}"
    https_proxy_env: "{{ lookup('env', 'https_proxy') | default('not_set', true) }}"
    https_validate_certs: yes
    distro: "{{ ansible_distribution | lower }}-{{ ansible_distribution_version.split('.')[:2] | join('.') }}-{{ ansible_architecture | lower }}"
  tasks:

    - name: Set the staging path
      set_fact:
        staging_path: |-
          {%- if (groups['repo_all'] is defined) and (groups['repo_all'] | length > 0) -%}
          /openstack/{{ hostvars[groups['repo_all'][0]]['inventory_hostname'] }}/repo
          {%- else -%}
          /openstack/stage
          {%- endif -%}
      tags:
        - always

    - name: Fetch the upstream manifest file
      uri:
        url: "{{ rpco_mirror_base_url }}/os-releases/{{ rpc_release }}/{{ distro }}/MANIFEST.in"
        return_content: yes
        validate_certs: "{{ https_validate_certs | bool }}"
      register: manifest
      tags:
        - always

    - name: Derive the lists of artifacts to download
      set_fact:
        #
        # The MANIFEST.in file gives us entries like this for wheels:
        #
        # pools/ubuntu-14.04-x86_64/alembic/alembic-0.8.7-py2.py3-none-any.whl
        # os-releases/r14.0.0rc1/ubuntu-14.04-x86_64/alembic-0.8.7-py2.py3-none-any.whl
        #
        # The first is the pool location, the second is the release
        # folder location. The wheel name is always the same.
        #
        # We only need to download from one accessible location to
        # the pools folder, then implement the symlinks from the
        # releases and links folder as is done in the repo-build
        # process. As such, we filter the list we get based on the
        # 'pools' path. The wheel list is separated from the venv
        # list due to the symlinking that needs to happen later
        # for wheels only.
        #
        # The resulting list has entries such as:
        # pools/ubuntu-14.04-x86_64/alembic/alembic-0.8.7-py2.py3-none-any.whl
        #
        python_wheel_list: |
          {%- set content_list = manifest.content.split('\n') -%}
          {%- set result_list = [] -%}
          {%- for item in content_list -%}
          {%-   if item.split('/')[0] == 'pools' -%}
          {%-     set _ = result_list.append(item) -%}
          {%-   endif -%}
          {%- endfor -%}
          {{- result_list -}}
        #
        # The MANIFEST.in file gives us entries like this for git
        # repositories:
        #
        # openstackgit/nova
        #
        # As we download the git data differently to the wheels,
        # we need to seperate this manifest data from the wheels.
        # As such, we filter the list we get based on the
        # 'openstackgit' path.
        #
        # The resulting list is therefore an unchanged list of
        # only the git folders.
        #
        git_folder_list: |
          {%- set content_list = manifest.content.split('\n') -%}
          {%- set result_list = [] -%}
          {%- for item in content_list -%}
          {%-   if item.split('/')[0] == 'openstackgit' -%}
          {%-     set _ = result_list.append(item) -%}
          {%-   endif -%}
          {%- endfor -%}
          {{- result_list -}}
        #
        # The MANIFEST.in file gives us entries like this for
        # python venvs:
        #
        # venvs/r14.0.0rc1/ubuntu-14.04-x86_64/aodh-r14.0.0rc1-x86_64.checksum
        # venvs/r14.0.0rc1/ubuntu-14.04-x86_64/aodh-r14.0.0rc1-x86_64.tgz
        #
        # Each file needs to be downloaded and placed in the same
        # relative path. The resulting list is therefore an
        # unchanged list of only the python venvs.
        #
        python_venv_list: |
          {%- set content_list = manifest.content.split('\n') -%}
          {%- set result_list = [] -%}
          {%- for item in content_list -%}
          {%-   if item.split('/')[0] == 'venvs' -%}
          {%-     set _ = result_list.append(item) -%}
          {%-   endif -%}
          {%- endfor -%}
          {{- result_list -}}
        #
        # The MANIFEST.in file gives us entries like this for
        # files in the releases folder that are not python
        # wheels:
        #
        # os-releases/r14.0.0rc1/ubuntu-14.04-x86_64/get-pip.py
        # os-releases/r14.0.0rc1/ubuntu-14.04-x86_64/requirements_absolute_requirements.txt
        # os-releases/r14.0.0rc1/ubuntu-14.04-x86_64/requirements_constraints.txt
        #
        # Each file needs to be downloaded and placed in the same
        # relative path. The resulting list is therefore an
        # unchanged list of only these files.
        #
        releases_file_list: |
          {%- set content_list = manifest.content.split('\n') -%}
          {%- set result_list = [] -%}
          {%- for item in content_list -%}
          {%-   if item.split('/')[0] == 'os-releases' -%}
          {%-     if not (item | match(".*\.whl")) -%}
          {%-       set _ = result_list.append(item) -%}
          {%-     endif -%}
          {%-   endif -%}
          {%- endfor -%}
          {{- result_list -}}
      tags:
        - always

    - name: Staging folders setup
      file:
        path: "{{ item }}"
        state: "directory"
      with_items:
        - "{{ staging_path }}/links"
        - "{{ staging_path }}/openstackgit"
        - "{{ staging_path }}/os-releases/{{ rpc_release }}/{{ distro }}"
        - "{{ staging_path }}/venvs/{{ rpc_release }}/{{ distro }}"
      tags:
        - always

    # The git checkout here is to 'master' to prevent an ansible-lint
    # failure. It will be checked out later to the right SHA in the
    # deployment process.
    - name: Clone git repositories asynchronously
      git:
        repo: "{{ rpco_mirror_base_url }}/{{ item }}"
        dest: "{{ staging_path }}/{{ item }}"
        version: master
        force: yes
      with_items: "{{ git_folder_list }}"
      register: _git_clone
      async: 1800
      poll: 0
      tags:
        - git

    - name: Install aria download manager
      package:
        name: "aria2"
        state: present
      tags:
        - python

    - name: Write python artifact URL list
      copy:
        content: |
          {% for item in python_wheel_list + python_venv_list + releases_file_list %}
          {{ rpco_mirror_base_url }}/{{ item }}
            dir={{ staging_path }}/{{ item | dirname }}
          {% endfor %}
        dest: "{{ aria_input_file }}"
      tags:
        - python

    - name: Download python artifacts
      command: >-
        aria2c --input-file={{ aria_input_file }}
        --allow-overwrite=true
        --conditional-get=true
        --quiet
        --check-certificate={{ (https_validate_certs | bool) | lower }}
        {{ (http_proxy_env != 'not_set') | ternary('--http-proxy=' ~ http_proxy_env, '') }}
        {{ (https_proxy_env != 'not_set') | ternary('--https-proxy=' ~ https_proxy_env, '') }}
      tags:
        - python

    - name: Python releases symlinks
      file:
        src: "../../../{{ item }}"
        dest: "{{ staging_path }}/os-releases/{{ rpc_release }}/{{ distro }}/{{ item | basename }}"
        state: "link"
      with_items: "{{ python_wheel_list }}"
      tags:
        - python

    - name: Python links symlinks
      file:
        src: "../{{ item }}"
        dest: "{{ staging_path }}/links/{{ item | basename }}"
        state: "link"
      with_items: "{{ python_wheel_list }}"
      tags:
        - python

    - name: Wait for git clones to complete
      async_status:
        jid: "{{ item['ansible_job_id'] }}"
      register: _git_jobs
      until: "{{ _git_jobs['finished'] | bool }}"
      delay: 5
      retries: 360
      with_items: "{{ _git_clone['results'] }}"
      when:
        - item['ansible_job_id'] is defined
      tags:
        - git
